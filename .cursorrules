# Custom Instructions for POC Grocery Automation Project

## Project Context
This is a POC application that receives grocery data from a fridge sensor and automatically places grocery orders for delivery.

## Development Guidelines
[Add your custom instructions here]

## Technical Stack
[Specify your preferred technologies, frameworks, etc.]

## Code Style
- Follow SOLID principles in all code implementations:
  - Single Responsibility Principle: Each class should have one reason to change
  - Open/Closed Principle: Classes should be open for extension but closed for modification
  - Liskov Substitution Principle: Derived classes must be substitutable for their base classes
  - Interface Segregation Principle: Many client-specific interfaces are better than one general-purpose interface
  - Dependency Inversion Principle: Depend on abstractions, not concretions

## Architecture Patterns
[Specify any architectural patterns to follow]

## Testing Requirements

We will use Mockito and JUnit5 for unit and component testing.

### Critical Rules
Essential patterns for testing:

1. **Core Principles**
   - Follow Arrange/Act/Assert pattern
   - One assertion concept per test
   - Use descriptive test names
   - Keep tests independent

2. **Quick Reference**
   ```java
   @Test
   void shouldReturnUserWhenValidIdProvided() {
       // Arrange
       final String userId = "123";
       when(userRepo.findById(userId)).thenReturn(Optional.of(new User()));
       
       // Act
       final User result = userService.getUser(userId);
       
       // Assert
       assertThat(result).isNotNull();
   }
   ```

### Examples
Implementation patterns and code samples:

#### Unit Test Pattern
```java
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    @Mock
    private UserRepository userRepo;
    
    @InjectMocks
    private UserService userService;
    
    @Test
    void shouldThrowExceptionWhenUserNotFound() {
        // Arrange
        final String userId = "invalid";
        when(userRepo.findById(userId)).thenReturn(Optional.empty());
        
        // Act & Assert
        assertThrows(UserNotFoundException.class,
            () -> userService.getUser(userId));
    }
}
```

#### Integration Test Pattern
```java
@SpringBootTest
class UserIntegrationTest {
    @Autowired
    private UserService userService;
    
    @Test
    void shouldSaveAndRetrieveUser() {
        // Arrange
        final User user = new User("test@email.com");
        
        // Act
        final User saved = userService.save(user);
        final User retrieved = userService.getUser(saved.getId());
        
        // Assert
        assertThat(retrieved)
            .usingRecursiveComparison()
            .isEqualTo(saved);
    }
}
```

### Advanced Patterns

#### Test Categories
- Unit Tests (isolated)
- Integration Tests (with dependencies)
- Performance Tests
- Security Tests

#### Test Data Management
- Use test factories
- Manage test data lifecycle
- Clean up after tests
- Use appropriate test profiles

#### Testing Best Practices
- Mock external dependencies
- Use appropriate assertions
- Handle async operations
- Test edge cases

#### Common Patterns
- Builder pattern for test data
- Test fixtures
- Parameterized tests
- Custom assertions

### Best Practices Checklist
Quick verification list for reviews:
- [ ] Tests are independent
- [ ] Mocks used appropriately
- [ ] Edge cases covered
- [ ] Clear test names
- [ ] Proper assertions used
- [ ] Test data cleaned up

## Other Instructions
1. Always save my prompts and your summary in a markdown file when working on this project
   - Save user prompts EXACTLY as provided - do not condense or summarize them
   - Include the full, unedited text of each user prompt
   - EXCEPTION: Do not save prompts that are solely about git operations (pushing, committing, status checks, etc.)
   - IMPORTANT: Consolidate all conversations into the appropriate phase master file (e.g., phase1-conversation-master.md)
   - Do NOT create separate conversation files - always append to the existing master file
2. Do not make any updates till I specifically ask. Always plan first and then execute
3. When making code changes:
   - Only compile the code to verify it builds successfully (`mvn compile`)
   - Do NOT run the server automatically (`mvn spring-boot:run`)
   - Wait for explicit instruction before starting the application 