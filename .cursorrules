# Custom Instructions for POC Grocery Automation Project

## Project Context
This is a POC application that receives grocery data from a fridge sensor and automatically places grocery orders for delivery.

## Development Guidelines
[Add your custom instructions here]

## Technical Stack
[Specify your preferred technologies, frameworks, etc.]

## Code Style
- Follow SOLID principles in all code implementations:
  - Single Responsibility Principle: Each class should have one reason to change
  - Open/Closed Principle: Classes should be open for extension but closed for modification
  - Liskov Substitution Principle: Derived classes must be substitutable for their base classes
  - Interface Segregation Principle: Many client-specific interfaces are better than one general-purpose interface
  - Dependency Inversion Principle: Depend on abstractions, not concretions

## Architecture Patterns
[Specify any architectural patterns to follow]

## Testing Requirements
[Add testing guidelines]

## Other Instructions
1. Always save my prompts and your summary in a markdown file when working on this project
   - Save user prompts EXACTLY as provided - do not condense or summarize them
   - Include the full, unedited text of each user prompt
   - EXCEPTION: Do not save prompts that are solely about git operations (pushing, committing, status checks, etc.)
   - IMPORTANT: Consolidate all conversations into the appropriate phase master file (e.g., phase1-conversation-master.md)
   - Do NOT create separate conversation files - always append to the existing master file
2. Do not make any updates till I specifically ask. Always plan first and then execute
3. When making code changes:
   - Only compile the code to verify it builds successfully (`mvn compile`)
   - Do NOT run the server automatically (`mvn spring-boot:run`)
   - Wait for explicit instruction before starting the application 